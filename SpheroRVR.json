{"README.md":"# Sphero SDK\n\nGreetings adventurous students, developers, hackers, and makers!  RVR is one of the best starting points into the vast world of robotics, and we're here to help you get started with using our approachable development tools.\n\n### Getting Started\n\nVisit our [Getting Started](https://sdk.sphero.com/getting_started) to learn more about the ins-and-outs of working with RVR, including some important details on the getting started process.\n\n### More information and documentation\n\nVisit our [SDK website](https://sdk.sphero.com) to find more information about RVR, the SDK and the API!\n\n### Where to get help\n\nVisit our [community forum](https://community.sphero.com/c/advanced-programming) to get help, share your project, or help others!\n\n### Staying up to date\n\nConsider [signing up](https://sdk.sphero.com/sign-up) for our SDK email list to stay current on new features being released in our robot firmware as well as our SDKs, including new platform / language support.\n\n# Sphero RVR SDK for micro:bit MakeCode\n\nThis module contains the set of commands that allow the micro:bit to communicate with the [Sphero RVR](https://www.sphero.com/rvr) robot using MakeCode.\n\nThe following commands are available in this module:\n\n### Movement\n\n* **drive**(*speed*, *heading*): drives the robot at the given speed with the given heading.\n  * *speed* (int): an integer from 0-255\n  * *heading* (int): an integer from 0-359 degrees (0 is forwards, 90 is to the right, 180 is backwards, and 270 is to the left)\n  ```\n  sphero.drive(80, 270)\n  ```\n* **stop**(*heading*): tells the robot to stop driving. The heading should be the robot's current heading.\n  * *heading* (int): an integer from 0-359 (0 is forwards, 90 is to the right, 180 is backwards, and 270 is to the left)\n  ```\n  sphero.stop(90)\n  ```\n* **resetYaw**(): sets the robot's current yaw angle to zero.\n  ```\n  sphero.resetYaw()\n  ```\n* **setRawMotors**(*leftMode*, *leftSpeed*, *rightMode*, *rightSpeed*): sets the motors' modes and speeds individually. If a mode value outside of the 0-2 range is given, the mode will default to 0 (off).\n  * *leftMode* (**RawMotorModes**): a member of the **RawMotorModes** class representing the drive mode for the left motor (OFF, FORWARD, BACKWARD)\n  * *leftSpeed* (int): an integer from 0-255\n  * *rightMode* (**RawMotorModes**): a member of the **RawMotorModes** class representing the drive mode for the right motor (OFF, FORWARD, BACKWARD)\n  * *rightSpeed* (int): an integer from 0-255\n  ```\n  sphero.setRawMotors(sphero.RawMotorModes.forward, 100, sphero.RawMotorModes.forward, 100)\n  ```\n\n### Lights\n\n* **setAllLeds**(*red*, *green*, *blue*): sets all of RVR's LEDs to the color represented by the given red, green, and blue values.\n  * *red* (int): an integer from 0-255 indicating the desired red value\n  * *green* (int): an integer from 0-255 indicating the desired green value\n  * *blue* (int): an integer from 0-255 indicating the desired blue value\n  ```\n  sphero.setAllLeds(255, 255, 0)\n  ```\n* **setRgbLedByIndex**(*index*, *red*, *green*, *blue*): sets the indicated LED to the color represented by the given red, green, and blue values.\n  * *index* (**LEDs**): a member of the **LEDs** class used to specify which LED is to be set\n  * *red* (int): an integer from 0-255 indicating the desired red value\n  * *green* (int): an integer from 0-255 indicating the desired green value\n  * *blue* (int): an integer from 0-255 indicating the desired blue value\n  ```\n  sphero.setRgbLedByIndex(sphero.LEDs.leftStatus, 0, 0, 255)\n  ```\n\n### Power\n\n* **sleep**(): puts the robot in a sleep state.\n  ```\n  sphero.sleep()\n  ```\n* **wake**(): wakes the robot from sleep.\n  ```\n  sphero.wake()\n  ```\n\n## Supported targets\n\n* for PXT/microbit\n","constants.ts":"namespace sphero {\n    export class ApiFlags {\n        public static readonly requestsResponse: number = 1 << 1;\n        public static readonly resetInactivityTimeout: number = 1 << 3;\n        public static readonly packetHasTargetId: number = 1 << 4;\n        public static readonly packetHasSourceId: number = 1 << 5;\n\n        public static readonly defaultRequestWithResponseFlags: number = ((ApiFlags.requestsResponse) | (ApiFlags.resetInactivityTimeout) | (ApiFlags.packetHasTargetId) | (ApiFlags.packetHasSourceId));\n    }\n\n    export class ApiParserFlags {\n        public static readonly escape: number = 0xAB;\n        public static readonly startOfPacket: number = 0x8D;\n        public static readonly endOfPacket: number = 0xD8;\n        public static readonly escapedEscape: number = 0x23;\n        public static readonly escapedStartOfPacket: number = 0x05;\n        public static readonly escapedEndOfPacket: number = 0x50;\n        public static readonly slipEscapeMask: number = 0x88;\n    }\n\n    export class ApiTargetsAndSources {\n        public static readonly robotNordicTarget: number = Utilities.nibblesToByte(Utilities.reverseNibbles([1, 1]));\n        public static readonly robotStTarget: number = Utilities.nibblesToByte(Utilities.reverseNibbles([1, 2]));\n        public static readonly serviceSource: number = Utilities.nibblesToByte(Utilities.reverseNibbles([0, 1]));\n    }\n\n    export enum RawMotorModes {\n        //% block=\"Off\"\n        off = 0,\n        //% block=\"Forward\"\n        forward = 1,\n        //% block=\"Backward\"\n        backward = 2\n    }\n\n    export enum LEDs {\n        //% block=\"Right Headlight\"\n        rightHeadlight = 0,\n        //% block=\"Left Headlight\"\n        leftHeadlight = 3,\n        //% block=\"Left Status\"\n        leftStatus = 6,\n        //% block=\"Right Status\"\n        rightStatus = 9,\n        //% block=\"Battery Door Rear\"\n        batteryDoorRear = 12,\n        //% block=\"Battery Door Front\"\n        batteryDoorFront = 15,\n        //% block=\"Power Button Front\"\n        powerButtonFront = 18,\n        //% block=\"Power Button Rear\"\n        powerButtonRear = 21,\n        //% block=\"Left Brakelight\"\n        leftBrakelight = 24,\n        //% block=\"Right Brakelight\"\n        rightBrakelight = 27\n    }\n\n    export class DriveCommands {\n        public static readonly driveDeviceId: number = 0x16;\n\n        public static readonly driveWithHeadingCommandId: number = 0x07;\n        public static readonly setRawMotorsCommandId: number = 0x01;\n        public static readonly resetYawCommandId: number = 0x06;\n    }\n\n    export class UserIoCommands {\n        public static readonly userIoDeviceId: number = 0x1A;\n\n        public static readonly setLEDsCommandId: number = 0x1A;\n    }\n\n    export class PowerCommands {\n        public static readonly powerDeviceId: number = 0x13;\n\n        public static readonly wakeCommandId: number = 0x0D;\n        public static readonly softSleepCommandId: number = 0x01;\n    }\n}\n","message.ts":"namespace sphero {\n    export interface IApiMessage {\n        readonly flags: number;\n        readonly sequenceNumber: number;\n\n        readonly targetId: number;\n        readonly sourceId: number;\n\n        readonly deviceId: number;\n        readonly commandId: number;\n\n        readonly dataRawBytes: Array<number> | null;\n        readonly messageRawBytes: Array<number>;\n\n        generateMessageRawBytes(): void;\n    }\n\n    export class ApiMessage implements IApiMessage {\n        protected _flags: number;\n        public get flags(): number {\n            return this._flags;\n        }\n\n        protected _sequenceNumber: number;\n        public get sequenceNumber(): number {\n            return this._sequenceNumber;\n        }\n\n        protected _targetId: number;\n        public get targetId(): number {\n            return this._targetId;\n        }\n\n        protected _sourceId: number;\n        public get sourceId(): number {\n            return this._sourceId;\n        }\n\n        protected _deviceId: number;\n        public get deviceId(): number {\n            return this._deviceId;\n        }\n\n        protected _commandId: number;\n        public get commandId(): number {\n            return this._commandId;\n        }\n\n        protected _dataRawBytes: Array<number>;\n        public get dataRawBytes(): Array<number> {\n            return this._dataRawBytes;\n        }\n\n        private _messageRawBytes: Array<number>;\n        public get messageRawBytes(): Array<number> {\n            return this._messageRawBytes;\n        }\n\n        public constructor(\n            flags: number, sequenceNumber: number,\n            targetId: number, sourceId: number,\n            deviceId: number, commandId: number,\n            dataRawBytes: Array<number> | null = null) {\n\n            this._flags = flags;\n            this._sequenceNumber = sequenceNumber;\n\n            this._targetId = targetId;\n            this._sourceId = sourceId;\n\n            this._deviceId = deviceId;\n            this._commandId = commandId;\n\n            this._dataRawBytes = !dataRawBytes ? [] : dataRawBytes;\n        }\n\n        public generateMessageRawBytes(): void {\n            this.generateMessageRawBytesInternal();\n        }\n\n        protected generateMessageRawBytesInternal(): void {\n            let checksum = 0;\n            this._messageRawBytes = [];\n\n            this._messageRawBytes.push(ApiParserFlags.startOfPacket);\n\n            this.encodeByteInBytes(this._messageRawBytes, this.flags);\n            checksum += this.flags;\n\n\n            if ((this.flags & ApiFlags.packetHasTargetId) > 0x00) {\n                this.encodeByteInBytes(this._messageRawBytes, this.targetId);\n                checksum += this.targetId;\n            }\n\n            if ((this.flags & ApiFlags.packetHasSourceId) > 0x00) {\n                this.encodeByteInBytes(this._messageRawBytes, this.sourceId);\n                checksum += this.sourceId;\n            }\n\n            this.encodeByteInBytes(this._messageRawBytes, this.deviceId);\n            checksum += this.deviceId;\n\n            this.encodeByteInBytes(this._messageRawBytes, this.commandId);\n            checksum += this.commandId;\n\n            this.encodeByteInBytes(this._messageRawBytes, this.sequenceNumber);\n            checksum += this.sequenceNumber;\n\n            for (let i: number = 0; i < this.dataRawBytes.length; i++) {\n                let dataByte = this.dataRawBytes[i];\n                this.encodeByteInBytes(this._messageRawBytes, dataByte);\n                checksum += dataByte;\n            }\n\n            checksum = ~(checksum % 256);\n            if (checksum < 0) {\n                checksum = 256 + checksum;\n            }\n\n            this.encodeByteInBytes(this._messageRawBytes, checksum);\n\n            this._messageRawBytes.push(ApiParserFlags.endOfPacket);\n        }\n\n        private encodeByteInBytes(bytes: Array<number>, byte: number): void {\n            switch (byte) {\n                case ApiParserFlags.startOfPacket:\n                    bytes.push(ApiParserFlags.escape);\n                    bytes.push(ApiParserFlags.escapedStartOfPacket);\n                    break;\n                case ApiParserFlags.endOfPacket:\n                    bytes.push(ApiParserFlags.escape);\n                    bytes.push(ApiParserFlags.escapedEndOfPacket);\n                    break;\n                case ApiParserFlags.escape:\n                    bytes.push(ApiParserFlags.escape);\n                    bytes.push(ApiParserFlags.escapedEscape);\n                    break;\n                default:\n                    bytes.push(byte);\n                    break;\n            }\n        }\n    }\n\n    let _sequenceNumber: number = 0;\n    function getNextSequenceNumber(): number {\n        return _sequenceNumber++ % 256;\n    }\n\n    function buildApiCommandMessage(\n        flags: number,\n        targetId: number, sourceId: number,\n        deviceId: number, commandId: number,\n        dataRawBytes: Array<number> | null = null): IApiMessage {\n\n        let sequenceNumber: number = getNextSequenceNumber();\n\n        let apiMessage: IApiMessage = new ApiMessage(\n            flags, sequenceNumber,\n            targetId, sourceId,\n            deviceId, commandId,\n            dataRawBytes\n        );\n\n        apiMessage.generateMessageRawBytes();\n\n        return apiMessage;\n    }\n\n    export function buildApiCommandMessageWithDefaultFlags(\n        targetId: number, sourceId: number,\n        deviceId: number, commandId: number,\n        dataRawBytes: Array<number> | null = null): IApiMessage {\n\n        let messageFlags: number = ApiFlags.defaultRequestWithResponseFlags;\n\n        let apiMessage: IApiMessage = buildApiCommandMessage(\n            messageFlags,\n            targetId, sourceId,\n            deviceId, commandId,\n            dataRawBytes\n        );\n\n        return apiMessage;\n    }\n}\n","pxt.json":"{\n    \"name\": \"SpheroRVR\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Sphero RVR SDK to use with micro:bit to control a Sphero RVR Robot.\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"utilities.ts\",\n        \"rvr.ts\",\n        \"constants.ts\",\n        \"message.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"branch\": \"v5.0.13\",\n        \"tag\": \"v5.0.13\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/a69388ca86364c33012c2814a6e4b1f547bf3bca\",\n        \"target\": \"5.0.13\",\n        \"pxt\": \"8.0.7\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n","rvr.ts":"/**\n * Control a Sphero RVR using these commands.\n */\n//% weight=100 color=#8527D7 icon=\"\\uf120\" block=\"Sphero RVR\"\nnamespace sphero {\n    /**\n     * Drive with a speed from -255 to +255 and a heading from 0 to 359\n     */\n    //% block=\"drive with speed %speed| and heading %heading|\"\n    //% help=spheroRvr/drive\n    //% speed.min=-255 speed.max=255\n    //% heading.min=0 heading.max=359\n    //% subcategory=Movement\n    export function drive(speed: number, heading: number): void {\n        let flags: number = 0x00;\n        if (speed < 0) {\n            flags = 0x01;\n        }\n\n        let messageData: Array<number> = [Math.abs(speed)];\n        let headingArray: Array<number> = Utilities.int16ToByteArray(heading);\n\n        for (let i: number = 0; i < headingArray.length; i++) {\n            messageData.push(headingArray[i]);\n        }\n\n        messageData.push(flags);\n\n        let apiMessage = buildApiCommandMessageWithDefaultFlags(\n            ApiTargetsAndSources.robotStTarget,\n            ApiTargetsAndSources.serviceSource,\n            DriveCommands.driveDeviceId,\n            DriveCommands.driveWithHeadingCommandId,\n            messageData\n        );\n\n        serial.writeBuffer(pins.createBufferFromArray(apiMessage.messageRawBytes));\n    }\n\n    /**\n     * Stop the RVR from driving with the given heading\n     */\n    //% block=\"stop with heading %heading|\"\n    //% help=spheroRvr/stop\n    //% heading.min=0 heading.max=359\n    //% subcategory=Movement\n    export function stop(heading: number): void {\n        let speed = 0x00;\n        let flags = 0x00;\n\n        let messageData: Array<number> = [speed];\n        let headingArray: Array<number> = Utilities.int16ToByteArray(heading);\n\n        for (let i: number = 0; i < headingArray.length; i++) {\n            messageData.push(headingArray[i]);\n        }\n\n        messageData.push(flags);\n\n        let apiMessage = buildApiCommandMessageWithDefaultFlags(\n            ApiTargetsAndSources.robotStTarget,\n            ApiTargetsAndSources.serviceSource,\n            DriveCommands.driveDeviceId,\n            DriveCommands.driveWithHeadingCommandId,\n            messageData\n        );\n\n        serial.writeBuffer(pins.createBufferFromArray(apiMessage.messageRawBytes));\n    }\n\n    /**\n     * Manually control the left and right motors\n     */\n    //% block=\"set raw motors with left mode:%leftMode| left speed:%leftSpeed| right mode:%rightMode| right speed:%rightSpeed|\"\n    //% help=spheroRvr/setRawMotors\n    //% leftSpeed.min=0 leftSpeed.max=255\n    //% rightSpeed.min=0 rightSpeed.max=255\n    //% subcategory=Movement\n    export function setRawMotors(leftMode: RawMotorModes, leftSpeed: number, rightMode: RawMotorModes, rightSpeed: number): void {\n        let messageData: Array<number> = [leftMode, leftSpeed, rightMode, rightSpeed];\n\n        let apiMessage = buildApiCommandMessageWithDefaultFlags(\n            ApiTargetsAndSources.robotStTarget,\n            ApiTargetsAndSources.serviceSource,\n            DriveCommands.driveDeviceId,\n            DriveCommands.setRawMotorsCommandId,\n            messageData\n        );\n\n        serial.writeBuffer(pins.createBufferFromArray(apiMessage.messageRawBytes));\n    }\n\n    /**\n     * Set the current yaw angle to zero\n     */\n    //% block=\"reset the yaw\"\n    //% help=spheroRvr/resetYaw\n    //% subcategory=Movement\n    export function resetYaw(): void {\n        let apiMessage = buildApiCommandMessageWithDefaultFlags(\n            ApiTargetsAndSources.robotStTarget,\n            ApiTargetsAndSources.serviceSource,\n            DriveCommands.driveDeviceId,\n            DriveCommands.resetYawCommandId,\n            null\n        );\n\n        serial.writeBuffer(pins.createBufferFromArray(apiMessage.messageRawBytes));\n    }\n\n    /**\n     * Set all RGB LEDs on the RVR to one RGB value\n     */\n    //% block=\"set all LEDs to red:%red| green:%green| blue:%blue|\"\n    //% help=spheroRvr/setAllLeds\n    //% red.min=0 red.max=255\n    //% green.min=0 green.max=255\n    //% blue.min=0 blue.max=255\n    //% subcategory=Lights\n    export function setAllLeds(red: number, green: number, blue: number): void {\n        let ledBitmask: Array<number> = [0x3F, 0xFF, 0xFF, 0xFF];\n\n        let messageData: Array<number> = ledBitmask;\n        for (let i: number = 0; i < 30; i += 3) {\n            messageData.push(red);\n            messageData.push(green);\n            messageData.push(blue);\n        }\n\n        let apiMessage = buildApiCommandMessageWithDefaultFlags(\n            ApiTargetsAndSources.robotNordicTarget,\n            ApiTargetsAndSources.serviceSource,\n            UserIoCommands.userIoDeviceId,\n            UserIoCommands.setLEDsCommandId,\n            messageData\n        );\n\n        serial.writeBuffer(pins.createBufferFromArray(apiMessage.messageRawBytes));\n    }\n\n    /**\n     * Set one individual RGB LED on the RVR to a specific RGB value\n     */\n    //% block=\"set RGB LED:%index| to red:%red| green:%green| blue:%blue|\"\n    //% help=spheroRvr/setRgbLedByIndex\n    //% red.min=0 red.max=255\n    //% green.min=0 green.max=255\n    //% blue.min=0 blue.max=255\n    //% subcategory=Lights\n    export function setRgbLedByIndex(index: LEDs, red: number, green: number, blue: number): void {\n        let ledBitValue: number = (0x07 << index);\n        let ledBitmask: Array<number> = Utilities.int32ToByteArray(ledBitValue);\n        let ledData: Array<number> = [red, green, blue];\n\n        let messageData: Array<number> = ledBitmask;\n        for (let i: number = 0; i < ledData.length; i++) {\n            messageData.push(ledData[i]);\n        }\n\n        let apiMessage = buildApiCommandMessageWithDefaultFlags(\n            ApiTargetsAndSources.robotNordicTarget,\n            ApiTargetsAndSources.serviceSource,\n            UserIoCommands.userIoDeviceId,\n            UserIoCommands.setLEDsCommandId,\n            messageData\n        );\n\n        serial.writeBuffer(pins.createBufferFromArray(apiMessage.messageRawBytes));\n    }\n\n    /**\n     * Wake the RVR from sleep\n     */\n    //% block=\"wake\"\n    //% help=spheroRvr/wake\n    //% subcategory=Power\n    export function wake(): void {\n        let apiMessage = buildApiCommandMessageWithDefaultFlags(\n            ApiTargetsAndSources.robotNordicTarget,\n            ApiTargetsAndSources.serviceSource,\n            PowerCommands.powerDeviceId,\n            PowerCommands.wakeCommandId,\n            null\n        );\n\n        serial.writeBuffer(pins.createBufferFromArray(apiMessage.messageRawBytes));\n    }\n\n    /**\n     * Put the RVR in a soft sleep state\n     */\n    //% block=\"sleep\"\n    //% help=spheroRvr/sleep\n    //% subcategory=Power\n    export function sleep(): void {\n        let apiMessage = buildApiCommandMessageWithDefaultFlags(\n            ApiTargetsAndSources.robotNordicTarget,\n            ApiTargetsAndSources.serviceSource,\n            PowerCommands.powerDeviceId,\n            PowerCommands.softSleepCommandId,\n            null\n        );\n\n        serial.writeBuffer(pins.createBufferFromArray(apiMessage.messageRawBytes));\n    }\n}\n","test.ts":"basic.pause(2000)\n\nsphero.drive(75, 0)\nbasic.pause(2000)\n\nsphero.drive(75, 90)\nbasic.pause(2000)\n\nsphero.stop(90)\nsphero.resetYaw()\nbasic.pause(1000)\n\nsphero.setRgbLedByIndex(\n    sphero.LEDs.rightBrakelight,\n    255,\n    0,\n    0\n)\nsphero.setRgbLedByIndex(\n    sphero.LEDs.leftBrakelight,\n    255,\n    0,\n    0\n)\n\nsphero.setRawMotors(\n    sphero.RawMotorModes.backward,\n    60,\n    sphero.RawMotorModes.backward,\n    60\n)\nbasic.pause(2000)\n\nsphero.setRawMotors(\n    sphero.RawMotorModes.off,\n    0,\n    sphero.RawMotorModes.off,\n    0\n)\nbasic.pause(1000)\n\nsphero.sleep()\nbasic.pause(5000)\n\nsphero.wake()\nbasic.pause(2000)\n\nsphero.setAllLeds(255, 255, 255)\n","utilities.ts":"namespace sphero {\n    export class Utilities {\n        public static numberToByteArray(value: number, size: number): Array<number> {\n            let bytes: Array<number> = [];\n\n            for (let i: number = 0; i < size; i++) {\n                bytes.push(0);\n            }\n\n            if (!value) {\n                return bytes;\n            }\n\n            for (let i: number = bytes.length - 1; i >= 0; i--) {\n                let byte: number = value & 0xFF;\n                bytes[i] = byte;\n                value = (value - byte) / 256;\n            }\n\n            return bytes;\n        }\n\n        public static int32ToByteArray(value: number): Array<number> {\n            return this.numberToByteArray(value, 4);\n        }\n\n        public static int16ToByteArray(value: number): Array<number> {\n            return this.numberToByteArray(value, 2);\n        }\n\n        public static nibblesToByte(nibbles: Array<number>): number {\n            let value: number = 0;\n\n            if (!nibbles) {\n                return value;\n            }\n\n            for (let i: number = nibbles.length - 1; i >= 0 ; i--) {\n                value = (value * 16) + nibbles[i];\n            }\n\n            return value;\n        }\n        public static reverseNibbles(nibbles: Array<number>): Array<number> {\n            nibbles.reverse();\n            return nibbles;\n        }\n    }\n}\n"}